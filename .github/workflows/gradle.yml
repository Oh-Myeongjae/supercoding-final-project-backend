# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Java CI with Gradle

# Event Trigger
# develop branch에 push가 발생할 경우 동작
on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

env:
  RESOURCE_PATH: ./src/main/resources/application.yml
  SECRET_KEY_SOURCE: ${{ secrets.SECRET_KEY_SOURCE }}

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

        # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

        #빌드를 하기 위한 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

        #빌드를 실행
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean build

        # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

        # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

        # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./deploy/

        # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

         # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./codevelop.zip ./deploy

         # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./codevelop.zip s3://codevelop/

        # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name codevelop \
          --deployment-group-name codevelop_deploy_group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=codevelop,bundleType=zip,key=codevelop.zip \
          --region ap-northeast-2